PHP Extension for intercepting calls.

Author: Viesturs Kavacs <kavackys@gmail.com>

v1.0 08.11.2011.

#################################
	Compiling
#################################

cd <where this file is located>

phpize
./configure
make clean && make

cp modules/interceptor.so <php extension dir>

sudo make clean && sudo make && sudo cp modules/interceptor.so /usr/lib64/php/modules/interceptor.so

If errors arise on sqlite functions, add "LDFLAGS = -lsqlite3" to Makefile

#################################
	php.ini
#################################

; Enable interceptor
extension=interceptor.so

; Nesting level for intercepts generated by intercept handlers
interceptor.max_depth = 3

; Logging method to use (1 - default text file, 2 - SQLite)
interceptor.log_type = 1

; Timestamp format for logging (C strftime)
interceptor.log_timestamp = "%d.%m.%Y %H:%M:%S"

; Where to log messages (default text file format)
interceptor.log_file = "/var/log/php_interceptor.log"

; Where to save logs (SQLite)
interceptor.log_sqlite_db = "/var/log/php_interceptor.sqlite3"

#################################
	Using with PHP
#################################

Add callname listeners in PHP script:

interceptor_add_callname(string callname, string handler_function_name [, int type = INTERCEPT_BEFORE ]);

Types are INTERCEPT_BEFORE and INTERCEPT_AFTER, tells to call handler before or after executing the call itself.

There can be only one handler per callname.

Callname can be:
"function_name"
"Class_Name::static_method_name"
"Class_Name->method_name"

For example, intercepting exceptions can be done with
interceptor_add_callname('Exception->__construct', 'my_exception_intercept_handler', INTERCEPT_BEFORE);

#################################
	Handler functions
#################################

Function will be called with single passed parameter - intercepted callname.

It should return string value that will be added to the end of line in logfile.

function my_exception_intercept_handler($callname)
{
	return "log me!";
}

#################################
	Log file format
#################################

<timestamp>
<process id>
<nesting level>
<bef | aft - intercepted before or after>
<callname>
<filename of call>
<line of call>
<handler_call_ok | handler_call_failed | gone_too_deep (nesting limit reached)>
<handler response string>

08.11.2011 15:18:00 5020 1 bef Exception->__construct "/var/www/intercept.php" 132 handler_call_ok handler says: intercepted Exception->__construct
